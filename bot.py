import os
import json
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

TOKEN = os.environ.get("TOKEN")
WEBAPP_URL = "https://gulyai-webapp.vercel.app"
USERS_FILE = "users.json"

logging.basicConfig(level=logging.INFO)


# üß† –•—Ä–∞–Ω–∏–ª–∏—â–µ
def load_users():
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r") as f:
        return json.load(f)

def save_user(user_data):
    users = load_users()
    users.append(user_data)
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=2)


# üöÄ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    intro = (
        "üí¨ –°–µ–≥–æ–¥–Ω—è —Å–ª–æ–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∂–∏–≤—ã–º –∏ –Ω–µ–ø–æ–¥–¥–µ–ª—å–Ω—ã–º.\n\n"
        "–¢–∏–Ω–¥–µ—Ä, Bumble –∏ –¥—Ä—É–≥–∏–µ ‚Äî —ç—Ç–æ –ø—Ä–æ —Å–≤–∏–¥–∞–Ω–∏—è, –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–≤–∞–π–ø—ã.\n\n"
        "–ê —á—Ç–æ, –µ—Å–ª–∏ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è *–ø–æ–≥—É–ª—è—Ç—å*, *–≤—ã–¥–æ—Ö–Ω—É—Ç—å*, *–ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –∫–µ–º-—Ç–æ*, –∫—Ç–æ —Ä—è–¥–æ–º?\n"
    )

    how_it_works = (
        "\nüë£ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Gulyai:\n\n"
        "1Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É ‚Äî —É–∫–∞–∂–∏ –∏–º—è, –∞–¥—Ä–µ—Å, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ç.–¥.\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ ‚Äú–ì—É–ª—è—Ç—å‚Äù ‚Äî —É–≤–∏–¥–∏—à—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n"
        "3Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∏ –∂–º–∏ –≥—É–ª—è—Ç—å –≥–¥–µ —É–≤–∏–¥–∏—à—å —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π.\n"
         
    )

    await update.message.reply_text(
        intro + how_it_works,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="continue_warning")]
        ])
    )



# ‚ö†Ô∏è –ü–æ—Å–ª–µ "–î–∞–ª–µ–µ"
async def handle_continue_warning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    warning_text = (
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n"
        "–ù–µ –≤—Å—Ç—Ä–µ—á–∞–π—Ç–µ—Å—å –≤ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –≤–∞–º —É–ª–∏—Ü–∞—Ö.\n"
        "–ì—É–ª—è–π—Ç–µ –≤ –±–æ–ª–µ–µ –ª—é–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö!\n"
        "–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∏–º"
    )

    await query.message.reply_text(
        warning_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
    [InlineKeyboardButton("–ì—É–ª—è—Ç—å", web_app=WebAppInfo(url=WEBAPP_URL))]
])
    )


# üîÅ /form ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞
async def form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –•–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
            resize_keyboard=True
        )
    )


# üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.message.web_app_data.data)
        save_user(data)

        name = data.get("name", "‚Äî")
        address = data.get("address", "‚Äî")
        age = data.get("age", "‚Äî")
        interests = data.get("interests", "‚Äî")
        activity = data.get("activity", "‚Äî")
        vibe = data.get("vibe", "‚Äî")
        photo = data.get("photo", None)

        text = (
            f"üì¨ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–ò–º—è: {name}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}\n"
            f"–¶–µ–ª—å: {activity}\n"
            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {vibe}"
        )

        await update.message.reply_text(
            text,
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
                resize_keyboard=True
            )
        )

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_continue_warning, pattern="^continue_warning$"))
app.add_handler(CommandHandler("form", form))
app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp))

print("ü§ñ Gulyai –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
app.run_polling()
