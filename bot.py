import os
import json
import logging
import requests
import httpx
from postgrest import PostgrestClient
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv
from fastapi import BackgroundTasks
from fastapi import FastAPI, Request
import asyncio

load_dotenv()

TOKEN = os.getenv("TOKEN")
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")
WEBAPP_URL = "https://gulyai-webapp.vercel.app"
ADMIN_ID = 987664835

db = PostgrestClient(f"{SUPABASE_URL}/rest/v1")
db.session.headers["apikey"] = SUPABASE_KEY
db.session.headers["Authorization"] = f"Bearer {SUPABASE_KEY}"

logging.basicConfig(level=logging.INFO)

if os.getenv("RUN_ENV") != "production":
    print("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Railway. –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    exit()

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Å—Ç–∞—Ä—Ç—É–µ–º

    intro = (
        "üí¨ –°–µ–≥–æ–¥–Ω—è —Å–ª–æ–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∂–∏–≤—ã–º –∏ –Ω–µ–ø–æ–¥–¥–µ–ª—å–Ω—ã–º.\n\n"
        "–¢–∏–Ω–¥–µ—Ä, Bumble –∏ –¥—Ä—É–≥–∏–µ ‚Äî —ç—Ç–æ –ø—Ä–æ —Å–≤–∏–¥–∞–Ω–∏—è, –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–≤–∞–π–ø—ã.\n\n"
        "–ê —á—Ç–æ, –µ—Å–ª–∏ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–≥—É–ª—è—Ç—å, –≤—ã–¥–æ—Ö–Ω—É—Ç—å, –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –∫–µ–º-—Ç–æ, –∫—Ç–æ —Ä—è–¥–æ–º?\n\n"
        "üë£ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Gulyai:\n\n"
        "1Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É ‚Äî —É–∫–∞–∂–∏ –∏–º—è, –∞–¥—Ä–µ—Å, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ç.–¥.\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ ‚Äú–ì—É–ª—è—Ç—å‚Äù ‚Äî —É–≤–∏–¥–∏—à—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n"
        "3Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∏ –∂–º–∏ –≥—É–ª—è—Ç—å –≥–¥–µ —É–≤–∏–¥–∏—à—å —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π."
    )

    await update.message.reply_text(
        intro,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="continue_warning")]
        ])
    )

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
async def handle_continue_warning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
    "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n"
    "–ù–µ –≤—ã–∫–ª—é—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n\n"
    "–ù–µ –≤—Å—Ç—Ä–µ—á–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö —É–ª–∏—Ü–∞—Ö!\n"
    "–ì—É–ª—è–π—Ç–µ –≤ –±–æ–ª–µ–µ –ª—é–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö.",
    parse_mode="Markdown",
    reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("–ì—É–ª—è—Ç—å", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
)

# /form
async def form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –•–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∫–µ—Ç—ã
async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.message.web_app_data.data)
        name = data.get("name", "‚Äî")
        address = data.get("address", "‚Äî")

        text = (
            f"üì¨ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–ò–º—è: {name}\n"
            f"–ê–¥—Ä–µ—Å: {address}"
        )

        await update.message.reply_text(text)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∫–µ—Ç—ã: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∫–µ—Ç—ã.")

# –ê–¥–º–∏–Ω–∫–∞
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    await update.message.reply_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì® –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
            [InlineKeyboardButton("üìä –ö–æ–ª-–≤–æ –∞–Ω–∫–µ—Ç", callback_data="admin_count")],
            [InlineKeyboardButton("‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID", callback_data="admin_direct")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫
async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "admin_broadcast":
        context.user_data["awaiting_broadcast"] = True
        context.user_data["pending_text"] = None

        await query.message.reply_text(
            "‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª ‚Äî –Ω–∞–∂–º–∏ ¬´–û—Ç–º–µ–Ω–∞¬ª:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
            ])
        )

    elif query.data == "admin_count":
        try:
            users = await db.from_("users").select("chat_id").execute()
            count = len(users.data)
            await query.message.reply_text(f"üìä –í –±–∞–∑–µ —Å–µ–π—á–∞—Å {count} –∞–Ω–∫–µ—Ç.")
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç: {e}")

    elif query.data == "admin_direct":
        context.user_data["awaiting_direct"] = True
        context.user_data["pending_direct"] = None

        await query.message.reply_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n1476116533::–ü—Ä–∏–≤–µ—Ç!\n\n–≠—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ chat_id.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_direct")]
            ])
        )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_direct") and update.effective_user.id == ADMIN_ID:
        context.user_data["awaiting_direct"] = False
        try:
            raw = update.message.text
            chat_id_str, text = raw.split("::", 1)
            chat_id = int(chat_id_str.strip())

            await context.bot.send_message(chat_id=chat_id, text=text.strip())
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    if context.user_data.get("awaiting_broadcast") and update.effective_user.id == ADMIN_ID:
        context.user_data["awaiting_broadcast"] = False
        context.user_data["pending_text"] = update.message.text

        await update.message.reply_text(
            f"üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –æ—Ç–ø—Ä–∞–≤–∫—É:\n\n{update.message.text}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
            ])
        )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ / –æ—Ç–º–µ–Ω–∞
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_broadcast":
        text = context.user_data.get("pending_text", "")
        try:
            result = await db.from_("users").select("chat_id").execute()
            users = result.data
            count = 0

            async def send_message(chat_id):
                nonlocal count
                try:
                    await context.bot.send_message(chat_id=chat_id, text=text)
                    count += 1
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")

            tasks = [send_message(user["chat_id"]) for user in users]
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
            for i in range(0, len(tasks), 30):
                await asyncio.gather(*tasks[i:i+30])
                await asyncio.sleep(1)

            await query.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")
        finally:
            context.user_data["pending_text"] = None

    elif query.data == "cancel_broadcast":
        context.user_data["pending_text"] = None
        await query.message.reply_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    elif query.data == "cancel_direct":
        context.user_data["awaiting_direct"] = False
        context.user_data["pending_direct"] = None
        await query.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ chat_id –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def forward_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    msg = update.message.text

    message = (
        f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        f"<b>ID:</b> <code>{user.id}</code>\n"
        f"<b>Username:</b> @{user.username or '‚Äî'}\n"
        f"<b>–ò–º—è:</b> {user.full_name}\n\n"
        f"{msg}"
    )

    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=message,
        parse_mode="HTML"
    )

    await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")

async def handle_meet_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    from_id = data.split("_")[1]

    if data.startswith("agree_"):
        try:
            initiator = await context.bot.get_chat(int(from_id))
            await query.message.reply_text(
                f"‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å! –í–æ—Ç —Å—Å—ã–ª–∫–∞: [@{initiator.username}](https://t.me/{initiator.username})",
                parse_mode="Markdown"
            )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ username –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞:", e)
            await query.message.reply_text(
                f"‚úÖ –í—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å! –í–æ—Ç —Å—Å—ã–ª–∫–∞: [–ü—Ä–æ—Ñ–∏–ª—å](https://t.me/user?id={from_id})",
                parse_mode="Markdown"
            )
        try:
            await context.bot.send_message(
                chat_id=from_id,
                text=f"‚úÖ {query.from_user.first_name} —Ç–æ–∂–µ —Ö–æ—á–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π!\n[–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å](https://t.me/{query.from_user.username})",
                parse_mode="Markdown"
            )

            ADMIN_ID = 987664835  # —Ç–≤–æ–π Telegram ID

            try:
                initiator = await context.bot.get_chat(int(from_id))
                responder = query.from_user

                initiator_name = f"@{initiator.username}" if initiator.username else f"id {from_id}"
                responder_name = f"@{responder.username}" if responder.username else f"id {responder.id}"

                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"üë• {responder_name} –∏ {initiator_name} —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è!"
                )
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:", e)
                
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:", e)

    elif data.startswith("decline_"):
        await query.message.reply_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
        await query.message.reply_text(
            "‚ÑπÔ∏è –ü–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—à—å—Å—è —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ—è–≤–∏—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ, –Ω–∞–∂–º–∏ ¬´–ì—É–ª—è—Ç—å¬ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        )
        
        # --> –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–∞–∑–µ
        try:
            await context.bot.send_message(
                chat_id=from_id,
                text="‚ùå –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–µ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ—Ç–∫–∞–∑–µ: {e}")
        
        # --> –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ offline
        try:
            await httpx.post(
                "https://gulyai-backend-production.up.railway.app/api/set-offline",
                json={"chat_id": query.from_user.id}
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ backend: {e}")
        
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot_app = ApplicationBuilder().token(TOKEN).build()
# –ó–∞–º–µ–Ω—è–µ–º –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö handlers:

bot_app = ApplicationBuilder().token(TOKEN).build()
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CommandHandler("form", form))
bot_app.add_handler(CommandHandler("admin", admin_panel))
bot_app.add_handler(CallbackQueryHandler(handle_continue_warning, pattern="^continue_warning$"))
bot_app.add_handler(CallbackQueryHandler(handle_admin_actions, pattern="^admin_"))
bot_app.add_handler(CallbackQueryHandler(handle_confirmation, pattern="^(confirm|cancel)_broadcast$"))
bot_app.add_handler(CallbackQueryHandler(handle_meet_response, pattern="^(agree_|decline_)"))
bot_app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp))
bot_app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), handle_text_message))
bot_app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), handle_text_message))
bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.User(ADMIN_ID), forward_to_admin))

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

# FastAPI —Å–µ—Ä–≤–µ—Ä
app = FastAPI()

@app.on_event("startup")
async def startup_event():
    await bot_app.initialize()
    print("‚úÖ Bot initialized")

@app.post(f"/webhook/{TOKEN}")
async def webhook_handler(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, bot_app.bot)
        asyncio.create_task(bot_app.process_update(update))  # –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        print(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {data}")
        return {"ok": True}  # —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç–∏—Ç—å Telegram
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        return {"ok": False, "error": str(e)}

# –ß—Ç–æ–±—ã Railway –Ω–∞—à—ë–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
fastapi_app = app