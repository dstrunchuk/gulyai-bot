import os
import json
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.environ.get("TOKEN")
WEBAPP_URL = "https://gulyai-webapp.vercel.app"
USERS_FILE = "users.json"

logging.basicConfig(level=logging.INFO)

# üß† –•—Ä–∞–Ω–∏–ª–∏—â–µ
def load_users():
    if not os.path.exists(USERS_FILE):
        return []
    with open(USERS_FILE, "r") as f:
        return json.load(f)

def save_user(user_data):
    users = load_users()
    users.append(user_data)
    with open(USERS_FILE, "w") as f:
        json.dump(users, f, indent=2)

# üöÄ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Gulyai:\n\n"
        "1Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É\n"
        "–£–∫–∞–∂–∏ –∏–º—è, —Ä–∞–π–æ–Ω, –∏–Ω—Ç–µ—Ä–µ—Å—ã ‚Äî –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –ü—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ –ø–æ –¥–µ–ª—É.\n\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ ‚Äú–ì–æ—Ç–æ–≤ –∫ –≤—Å—Ç—Ä–µ—á–µ‚Äù\n"
        "–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∂–µ —Ö–æ—Ç—è—Ç –≤—ã–π—Ç–∏ –∏ –ø–æ–æ–±—â–∞—Ç—å—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n"
        "3Ô∏è‚É£ –°–≤—è–∑—å —á–µ—Ä–µ–∑ Telegram\n"
        "–ó–∞—Ö–æ—Ç–µ–ª ‚Äî –Ω–∞–ø–∏—Å–∞–ª, –¥–æ–≥–æ–≤–æ—Ä–∏–ª—Å—è, –≤—Å—Ç—Ä–µ—Ç–∏–ª—Å—è. –ù–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º."
    )

    await update.message.reply_text(
        text,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="continue_warning")]
        ])
    )

# ‚ö†Ô∏è –ü–æ—Å–ª–µ "–î–∞–ª–µ–µ"
async def handle_continue_warning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    warning_text = (
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n"
        "–ù–µ –≤—Å—Ç—Ä–µ—á–∞–π—Ç–µ—Å—å –≤ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –≤–∞–º –º–µ—Å—Ç–∞—Ö, —É–ª–∏—Ü–∞—Ö.\n"
        "–ì—É–ª—è–π—Ç–µ –≤ –±–æ–ª–µ–µ –æ–±–æ—é–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö!"
    )

    await query.message.reply_text(
        warning_text,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
            resize_keyboard=True
        )
    )

# üîÅ /form ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
async def form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –•–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
            resize_keyboard=True
        )
    )

# üì• –ü—Ä–∏–µ–º –∞–Ω–∫–µ—Ç—ã
async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.message.web_app_data.data)
        save_user(data)
        print("üî• –ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp:")
        print(data)

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–∏
        name = data.get("name", "‚Äî")
        district = data.get("location", "‚Äî")
        age = data.get("age", "‚Äî")
        interests = data.get("interests", "‚Äî")
        activity = data.get("activity", "‚Äî")
        vibe = data.get("vibe", "‚Äî")

        await update.message.reply_text(
            f"üì¨ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–ò–º—è: {name}\n"
            f"–†–∞–π–æ–Ω: {district}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}\n"
            f"–¶–µ–ª—å: {activity}\n"
            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {vibe}",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
                resize_keyboard=True
            )
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# üöÄ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ polling (–Ω–∞–¥—ë–∂–Ω–æ)
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_continue_warning, pattern="^continue_warning$"))
app.add_handler(CommandHandler("form", form))
app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp))

print("ü§ñ Gulyai –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É –∞–Ω–∫–µ—Ç!")
app.run_polling()
