
import os
import json
import logging
import requests
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "987664835"))
WEBAPP_URL = "https://gulyai-webapp.vercel.app"
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")

logging.basicConfig(level=logging.INFO)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    intro = (
        "üí¨ –°–µ–≥–æ–¥–Ω—è —Å–ª–æ–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∂–∏–≤—ã–º –∏ –Ω–µ–ø–æ–¥–¥–µ–ª—å–Ω—ã–º."
        "–¢–∏–Ω–¥–µ—Ä, Bumble –∏ –¥—Ä—É–≥–∏–µ ‚Äî —ç—Ç–æ –ø—Ä–æ —Å–≤–∏–¥–∞–Ω–∏—è, –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–≤–∞–π–ø—ã."
        "–ê —á—Ç–æ, –µ—Å–ª–∏ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è *–ø–æ–≥—É–ª—è—Ç—å*, *–≤—ã–¥–æ—Ö–Ω—É—Ç—å*, *–ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –∫–µ–º-—Ç–æ*, –∫—Ç–æ —Ä—è–¥–æ–º?"
    )
    how_it_works = (
        "\nüë£ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Gulyai:\n\n"
        "1Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É ‚Äî —É–∫–∞–∂–∏ –∏–º—è, –∞–¥—Ä–µ—Å, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ç.–¥.\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ ‚Äú–ì—É–ª—è—Ç—å‚Äù ‚Äî —É–≤–∏–¥–∏—à—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n"
        "3Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É –∏ –∂–º–∏ –≥—É–ª—è—Ç—å –≥–¥–µ —É–≤–∏–¥–∏—à—å —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π.\n"
    )
    await update.message.reply_text(
        intro + how_it_works,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="continue_warning")]
        ])
    )

# ‚ö†Ô∏è –ü–æ—Å–ª–µ "–î–∞–ª–µ–µ"
async def handle_continue_warning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n–ù–µ –≤—Å—Ç—Ä–µ—á–∞–π—Ç–µ—Å—å –≤ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö –º–µ—Å—Ç–∞—Ö. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∏–º.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ì—É–ª—è—Ç—å", web_app=WebAppInfo(url=WEBAPP_URL))]
        ])
    )

# /form ‚Äî –∫–æ–º–∞–Ω–¥–∞
async def form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –•–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
            resize_keyboard=True
        )
    )

# /admin ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    await update.message.reply_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="broadcast")],
            [InlineKeyboardButton("üë• –ö–æ–ª-–≤–æ –∞–Ω–∫–µ—Ç", callback_data="count_users")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π
async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id != ADMIN_ID:
        return

    if query.data == "count_users":
        res = requests.get(
            f"{SUPABASE_URL}/rest/v1/users?select=chat_id",
            headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"}
        )
        count = len(res.json()) if res.ok else "?"
        await query.message.reply_text(f"üë• –í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {count}")

    if query.data == "broadcast":
        context.user_data["awaiting_broadcast"] = True
        await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ /cancel")

# –¢–µ–∫—Å—Ç –æ—Ç –∞–¥–º–∏–Ω–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    if context.user_data.get("awaiting_broadcast"):
        text = update.message.text
        await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∞–µ–º...")

        res = requests.get(
            f"{SUPABASE_URL}/rest/v1/users?select=chat_id",
            headers={"apikey": SUPABASE_KEY, "Authorization": f"Bearer {SUPABASE_KEY}"}
        )
        if not res.ok:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫.")
            return

        for user in res.json():
            try:
                await context.bot.send_message(chat_id=user["chat_id"], text=text)
            except Exception:
                continue

        await update.message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        context.user_data["awaiting_broadcast"] = False

# /cancel
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        context.user_data["awaiting_broadcast"] = False
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("form", form))
app.add_handler(CommandHandler("admin", admin))
app.add_handler(CommandHandler("cancel", cancel))
app.add_handler(CallbackQueryHandler(handle_continue_warning, pattern="^continue_warning$"))
app.add_handler(CallbackQueryHandler(handle_admin_action, pattern="^(broadcast|count_users)$"))
app.add_handler(MessageHandler(filters.TEXT, handle_text))

print("ü§ñ Gulyai-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling()
