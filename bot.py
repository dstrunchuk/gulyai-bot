import os
import json
import logging
import requests
from dotenv import load_dotenv
from supabase import create_client, Client
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

load_dotenv()

TOKEN = os.getenv("TOKEN")
WEBAPP_URL = "https://gulyai-webapp.vercel.app"
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY")
ADMIN_ID = 987664835

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

logging.basicConfig(level=logging.INFO)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    intro = (
        "üí¨ –°–µ–≥–æ–¥–Ω—è —Å–ª–æ–∂–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∂–∏–≤—ã–º –∏ –Ω–µ–ø–æ–¥–¥–µ–ª—å–Ω—ã–º.\n\n"
        "–¢–∏–Ω–¥–µ—Ä, Bumble –∏ –¥—Ä—É–≥–∏–µ ‚Äî —ç—Ç–æ –ø—Ä–æ —Å–≤–∏–¥–∞–Ω–∏—è, –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–≤–∞–π–ø—ã.\n\n"
        "–ê —á—Ç–æ, –µ—Å–ª–∏ —Ç–µ–±–µ –ø—Ä–æ—Å—Ç–æ —Ö–æ—á–µ—Ç—Å—è *–ø–æ–≥—É–ª—è—Ç—å*, *–≤—ã–¥–æ—Ö–Ω—É—Ç—å*, *–ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –∫–µ–º-—Ç–æ*, –∫—Ç–æ —Ä—è–¥–æ–º?\n"
    )

    how = (
        "\nüë£ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Gulyai:\n\n"
        "1Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É ‚Äî —É–∫–∞–∂–∏ –∏–º—è, –∞–¥—Ä–µ—Å, –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ç.–¥.\n"
        "2Ô∏è‚É£ –ù–∞–∂–º–∏ ‚Äú–ì—É–ª—è—Ç—å‚Äù ‚Äî —É–≤–∏–¥–∏—à—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n"
        "3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å—Ç–∞—Ç—É—Å –∏ —É–≤–∏–¥–∏—à—å —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π —Ä—è–¥–æ–º."
    )

    buttons = [[InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="continue_warning")]]

    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", callback_data="admin_menu")])

    await update.message.reply_text(
        intro + how,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
async def handle_continue_warning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "‚ö†Ô∏è –ù–µ –≤—Å—Ç—Ä–µ—á–∞–π—Ç–µ—Å—å –≤ –Ω–µ–∑–Ω–∞–∫–æ–º—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö. –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∏–º.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ì—É–ª—è—Ç—å", web_app=WebAppInfo(url=WEBAPP_URL))]
        ])
    )

# –ê–¥–º–∏–Ω–∫–∞
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –°–∫–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç", callback_data="count_profiles")],
            [InlineKeyboardButton("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="broadcast_text")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="continue_warning")]
        ])
    )

# –ö–æ–ª-–≤–æ –∞–Ω–∫–µ—Ç
async def handle_count_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        result = supabase.table("users").select("chat_id").execute()
        count = len(result.data)
        await query.message.reply_text(f"üìä –í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {count}")
    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏
async def handle_broadcast_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["awaiting_broadcast"] = True

    await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n–ù–∞–ø–∏—à–∏ *–Ω–∞–∑–∞–¥*, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.", parse_mode="Markdown")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    if context.user_data.get("awaiting_broadcast"):
        text = update.message.text.strip()
        if text.lower() == "–Ω–∞–∑–∞–¥":
            context.user_data["awaiting_broadcast"] = False
            await update.message.reply_text("‚Ü©Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        await update.message.reply_text("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        try:
            result = supabase.table("users").select("chat_id").execute()
            count = 0

            for user in result.data:
                chat_id = user["chat_id"]
                try:
                    requests.post(
                        f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                        json={"chat_id": chat_id, "text": text}
                    )
                    count += 1
                except Exception as e:
                    print(f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

            await update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {e}")

        context.user_data["awaiting_broadcast"] = False

# /form ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
async def form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –•–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É?",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
            resize_keyboard=True
        )
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏–∑ WebApp
async def handle_webapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.message.web_app_data.data)

        text = (
            f"üì¨ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n"
            f"–ò–º—è: {data.get('name')}\n"
            f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {data.get('interests')}\n"
            f"–¶–µ–ª—å: {data.get('activity')}\n"
            f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {data.get('vibe')}"
        )

        await update.message.reply_text(
            text,
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", web_app=WebAppInfo(url=WEBAPP_URL))]],
                resize_keyboard=True
            )
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∫–µ—Ç—ã.")

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_continue_warning, pattern="^continue_warning$"))
app.add_handler(CallbackQueryHandler(admin_menu, pattern="^admin_menu$"))
app.add_handler(CallbackQueryHandler(handle_count_profiles, pattern="^count_profiles$"))
app.add_handler(CallbackQueryHandler(handle_broadcast_text, pattern="^broadcast_text$"))
app.add_handler(CommandHandler("form", form))
app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp))
app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), handle_text_message))

print("ü§ñ Gulyai –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling()